#include<stdio.h>
#include <stdlib.h>
#include<math.h>
#ifndef hpq_H
#define hpq_H
typedef struct HPQ
{
	int arrival_time; // 'A' for arrival 'D' for departure
	int duration; 
		
} HPQ;

typedef struct HPQ_HPQNode
{
	HPQ hpq;
	struct HPQNode *link;
} HPQNode;

HPQNode *hpq_front,*hpq_rear;   /* Global Declarations */

void hpqInsert(HPQ new_hpq)
{
	HPQNode *temp, *iter, *iter_front; 
	temp = (HPQNode *)malloc(sizeof(HPQNode));

	if( temp == NULL)
	{
		printf(" Out of Memory !! Overflow !!!");
	}
	else
	{
		temp->hpq.arrival_time = new_hpq.arrival_time;
		temp->hpq.duration = new_hpq.duration;
		temp->link = NULL;
		if(hpq_front == NULL)
		{
			hpq_front = hpq_rear = temp;
		}
		
		else if(hpq_front == hpq_rear)
		{
			hpq_rear->link=temp;
			hpq_rear = temp;
			
		}
		
		else
		{
			hpq_rear->link=temp;
			hpq_rear = temp;
			
		}
	}
}
 
HPQ hpqDelete()
{
	HPQ hpq;
	HPQNode *temp;
	if(hpq_front ==  NULL) 
	{
		printf(" Underflow!!!");
		return;
	}
	else
	{
		temp=hpq_front;
		hpq.arrival_time = hpq_front->hpq.arrival_time;
		hpq.duration = hpq_front->hpq.duration;
		if(hpq_front == hpq_rear) hpq_rear=NULL;
		hpq_front=hpq_front->link;
		temp->link=NULL;
		free(temp);
		return(hpq);
	}
}
 
int getHPQCount()
{
	HPQNode *temp;
	if( hpq_front == NULL) return 0;
	else
	{
		temp=hpq_front;
		int count = 0;
		while(temp)
		{
			count = count + 1;
			temp=temp->link;
		}
	return count;
	}
}
#endif
